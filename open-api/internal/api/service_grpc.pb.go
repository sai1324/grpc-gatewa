// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: service.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WenchangchainClient is the client API for Wenchangchain service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WenchangchainClient interface {
	CreateNftClass(ctx context.Context, in *CreateNftRequest, opts ...grpc.CallOption) (*CreateNftResponse, error)
	ClassByID(ctx context.Context, in *ClassByIDRequest, opts ...grpc.CallOption) (*ClassByIDResponse, error)
}

type wenchangchainClient struct {
	cc grpc.ClientConnInterface
}

func NewWenchangchainClient(cc grpc.ClientConnInterface) WenchangchainClient {
	return &wenchangchainClient{cc}
}// 创建grpc客户端

func (c *wenchangchainClient) CreateNftClass(ctx context.Context, in *CreateNftRequest, opts ...grpc.CallOption) (*CreateNftResponse, error) {
	out := new(CreateNftResponse)
	err := c.cc.Invoke(ctx, "/chainservice.wenchangchain/CreateNftClass", in, out, opts...)//指定grpc服务端的方法路径
	if err != nil {
		return nil, err
	}

	return out, nil
}

func (c *wenchangchainClient) ClassByID(ctx context.Context, in *ClassByIDRequest, opts ...grpc.CallOption) (*ClassByIDResponse, error) {
	out := new(ClassByIDResponse)
	err := c.cc.Invoke(ctx, "/chainservice.wenchangchain/ClassByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WenchangchainServer is the server API for Wenchangchain service.
// All implementations must embed UnimplementedWenchangchainServer
// for forward compatibility
type WenchangchainServer interface {
	CreateNftClass(context.Context, *CreateNftRequest) (*CreateNftResponse, error)
	ClassByID(context.Context, *ClassByIDRequest) (*ClassByIDResponse, error)
	mustEmbedUnimplementedWenchangchainServer()
}

// UnimplementedWenchangchainServer must be embedded to have forward compatible implementations.
type UnimplementedWenchangchainServer struct {
}

func (UnimplementedWenchangchainServer) CreateNftClass(context.Context, *CreateNftRequest) (*CreateNftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNftClass not implemented")
}
func (UnimplementedWenchangchainServer) ClassByID(context.Context, *ClassByIDRequest) (*ClassByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClassByID not implemented")
}
func (UnimplementedWenchangchainServer) mustEmbedUnimplementedWenchangchainServer() {}

// UnsafeWenchangchainServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WenchangchainServer will
// result in compilation errors.
type UnsafeWenchangchainServer interface {
	mustEmbedUnimplementedWenchangchainServer()
}

func RegisterWenchangchainServer(s grpc.ServiceRegistrar, srv WenchangchainServer) {
	s.RegisterService(&Wenchangchain_ServiceDesc, srv)
}

func _Wenchangchain_CreateNftClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WenchangchainServer).CreateNftClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chainservice.wenchangchain/CreateNftClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WenchangchainServer).CreateNftClass(ctx, req.(*CreateNftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wenchangchain_ClassByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClassByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WenchangchainServer).ClassByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chainservice.wenchangchain/ClassByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WenchangchainServer).ClassByID(ctx, req.(*ClassByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Wenchangchain_ServiceDesc is the grpc.ServiceDesc for Wenchangchain service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Wenchangchain_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chainservice.wenchangchain",
	HandlerType: (*WenchangchainServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNftClass",
			Handler:    _Wenchangchain_CreateNftClass_Handler,
		},
		{
			MethodName: "ClassByID",
			Handler:    _Wenchangchain_ClassByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// ShenzhouClient is the client API for Shenzhou service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShenzhouClient interface {
	CreateNftClass(ctx context.Context, in *CreateNftRequest, opts ...grpc.CallOption) (*CreateNftResponse, error)
	ClassByID(ctx context.Context, in *ClassByIDRequest, opts ...grpc.CallOption) (*ClassByIDResponse, error)
}

type shenzhouClient struct {
	cc grpc.ClientConnInterface
}

func NewShenzhouClient(cc grpc.ClientConnInterface) ShenzhouClient {
	return &shenzhouClient{cc}
}

func (c *shenzhouClient) CreateNftClass(ctx context.Context, in *CreateNftRequest, opts ...grpc.CallOption) (*CreateNftResponse, error) {
	out := new(CreateNftResponse)
	err := c.cc.Invoke(ctx, "/chainservice.shenzhou/CreateNftClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shenzhouClient) ClassByID(ctx context.Context, in *ClassByIDRequest, opts ...grpc.CallOption) (*ClassByIDResponse, error) {
	out := new(ClassByIDResponse)
	err := c.cc.Invoke(ctx, "/chainservice.shenzhou/ClassByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShenzhouServer is the server API for Shenzhou service.
// All implementations must embed UnimplementedShenzhouServer
// for forward compatibility
type ShenzhouServer interface {
	CreateNftClass(context.Context, *CreateNftRequest) (*CreateNftResponse, error)
	ClassByID(context.Context, *ClassByIDRequest) (*ClassByIDResponse, error)
	mustEmbedUnimplementedShenzhouServer()
}

// UnimplementedShenzhouServer must be embedded to have forward compatible implementations.
type UnimplementedShenzhouServer struct {
}

func (UnimplementedShenzhouServer) CreateNftClass(context.Context, *CreateNftRequest) (*CreateNftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNftClass not implemented")
}
func (UnimplementedShenzhouServer) ClassByID(context.Context, *ClassByIDRequest) (*ClassByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClassByID not implemented")
}
func (UnimplementedShenzhouServer) mustEmbedUnimplementedShenzhouServer() {}

// UnsafeShenzhouServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShenzhouServer will
// result in compilation errors.
type UnsafeShenzhouServer interface {
	mustEmbedUnimplementedShenzhouServer()
}

func RegisterShenzhouServer(s grpc.ServiceRegistrar, srv ShenzhouServer) {
	s.RegisterService(&Shenzhou_ServiceDesc, srv)
}

func _Shenzhou_CreateNftClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShenzhouServer).CreateNftClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chainservice.shenzhou/CreateNftClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShenzhouServer).CreateNftClass(ctx, req.(*CreateNftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shenzhou_ClassByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClassByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShenzhouServer).ClassByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chainservice.shenzhou/ClassByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShenzhouServer).ClassByID(ctx, req.(*ClassByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Shenzhou_ServiceDesc is the grpc.ServiceDesc for Shenzhou service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shenzhou_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chainservice.shenzhou",
	HandlerType: (*ShenzhouServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNftClass",
			Handler:    _Shenzhou_CreateNftClass_Handler,
		},
		{
			MethodName: "ClassByID",
			Handler:    _Shenzhou_ClassByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
