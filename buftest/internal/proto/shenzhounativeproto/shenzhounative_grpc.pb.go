// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: shenzhounative.proto

package shenzhounativeproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	"grpc-gateway/buftest/internal/proto/shenzhouevmproto"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NFTNativeClient is the client API for NFTNative service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NFTNativeClient interface {
	CreateNftClass(ctx context.Context, in *shenzhouevmproto.CreateNftRequest, opts ...grpc.CallOption) (*shenzhouevmproto.CreateNftResponse, error)
	FindNftClassyID(ctx context.Context, in *shenzhouevmproto.ClassByIDRequest, opts ...grpc.CallOption) (*shenzhouevmproto.ClassByIDResponse, error)
}

type nFTNativeClient struct {
	cc grpc.ClientConnInterface
}

func NewNFTNativeClient(cc grpc.ClientConnInterface) NFTNativeClient {
	return &nFTNativeClient{cc}
}

func (c *nFTNativeClient) CreateNftClass(ctx context.Context, in *shenzhouevmproto.CreateNftRequest, opts ...grpc.CallOption) (*shenzhouevmproto.CreateNftResponse, error) {
	out := new(shenzhouevmproto.CreateNftResponse)
	err := c.cc.Invoke(ctx, "/shenzhouNative.NFTNative/CreateNftClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTNativeClient) FindNftClassyID(ctx context.Context, in *shenzhouevmproto.ClassByIDRequest, opts ...grpc.CallOption) (*shenzhouevmproto.ClassByIDResponse, error) {
	out := new(shenzhouevmproto.ClassByIDResponse)
	err := c.cc.Invoke(ctx, "/shenzhouNative.NFTNative/FindNftClassyID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NFTNativeServer is the server API for NFTNative service.
// All implementations must embed UnimplementedNFTNativeServer
// for forward compatibility
type NFTNativeServer interface {
	CreateNftClass(context.Context, *shenzhouevmproto.CreateNftRequest) (*shenzhouevmproto.CreateNftResponse, error)
	FindNftClassyID(context.Context, *shenzhouevmproto.ClassByIDRequest) (*shenzhouevmproto.ClassByIDResponse, error)
	mustEmbedUnimplementedNFTNativeServer()
}

// UnimplementedNFTNativeServer must be embedded to have forward compatible implementations.
type UnimplementedNFTNativeServer struct {
}

func (UnimplementedNFTNativeServer) CreateNftClass(context.Context, *shenzhouevmproto.CreateNftRequest) (*shenzhouevmproto.CreateNftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNftClass not implemented")
}
func (UnimplementedNFTNativeServer) FindNftClassyID(context.Context, *shenzhouevmproto.ClassByIDRequest) (*shenzhouevmproto.ClassByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindNftClassyID not implemented")
}
func (UnimplementedNFTNativeServer) mustEmbedUnimplementedNFTNativeServer() {}

// UnsafeNFTNativeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NFTNativeServer will
// result in compilation errors.
type UnsafeNFTNativeServer interface {
	mustEmbedUnimplementedNFTNativeServer()
}

func RegisterNFTNativeServer(s grpc.ServiceRegistrar, srv NFTNativeServer) {
	s.RegisterService(&NFTNative_ServiceDesc, srv)
}

func _NFTNative_CreateNftClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(shenzhouevmproto.CreateNftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTNativeServer).CreateNftClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shenzhouNative.NFTNative/CreateNftClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTNativeServer).CreateNftClass(ctx, req.(*shenzhouevmproto.CreateNftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTNative_FindNftClassyID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(shenzhouevmproto.ClassByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTNativeServer).FindNftClassyID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shenzhouNative.NFTNative/FindNftClassyID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTNativeServer).FindNftClassyID(ctx, req.(*shenzhouevmproto.ClassByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NFTNative_ServiceDesc is the grpc.ServiceDesc for NFTNative service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NFTNative_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shenzhouNative.NFTNative",
	HandlerType: (*NFTNativeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNftClass",
			Handler:    _NFTNative_CreateNftClass_Handler,
		},
		{
			MethodName: "FindNftClassyID",
			Handler:    _NFTNative_FindNftClassyID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shenzhounative.proto",
}
